plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.kit'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    maven {
        url "s3://kit-java-repository/"
        credentials(AwsCredentials) {
            accessKey AWS_S3_KEY_ID
            secretKey AWS_S3_KEY_SECRET
        }
    }
    mavenCentral()
}

dependencies {

    implementation 'com.kit:serviceSDK:1.17'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.openapitools:openapi-generator-cli:7.4.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('com.fasterxml.jackson.core:jackson-databind')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('org.springdoc:springdoc-openapi-ui:1.8.0')
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-inline:3.4.0'

    //runtimeOnly 'com.mysql:mysql-connector-j'
    //runtimeOnly 'com.h2database:h2:1.4.200'
}

ext {
    excludedPatterns = [
            '**/ClientServiceApplication*',
            '**/config*/**',
            '**/model*/**',
            '**/dao*/**',
            '**/*MapperImpl*/**',
            '**/CacheEvictConfig*'
    ]
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: project.excludedPatterns)
        }))
    }
}

test {
    finalizedBy jacocoTestReport
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}
tasks.named('test') {
    useJUnitPlatform()
}

configurations {
    openApiConfiguration.extendsFrom compileOnly
}

task openApiGenerate(type: JavaExec) {
    classpath = configurations.openApiConfiguration
    mainClass = 'org.openapitools.codegen.OpenAPIGenerator'
    def additionalProperties = [
            "library=spring-boot",
            "useSpringBoot3=true",
            "useOptional=false",
            "openApiNullable=false",
            "swaggerDocketConfig=false",
            "performBeanValidation=false",
            "useBeanValidation=false",
            "useTags=true",
            "singleContentTypes=true",
            "title=" + rootProject.name,
            "dateLibrary=java8-time",
            "serializableModel=true",
            "serializationLibrary=jackson",
            "skipDefaultInterface=true",
            "interfaceOnly=true",
            "unhandledException=true"
    ].join(",")

    args = ["generate",
            "--input-spec", "\"${projectDir}\\src\\main\\resources\\openapi-specification.yml\"",
            "-g", "spring",
            "-o", "generated\\openapi",
            "--api-package", "${project.group}.${project.name}.api",
            "--model-package", "${project.group}.${project.name}.model.dto",
            "--additional-properties", "\"${additionalProperties}\"",
            "--model-name-suffix", "DTO",
            "--openapi-normalizer", "REF_AS_PARENT_IN_ALLOF=true"]
}

sourceSets {
    main {
        java {
            srcDir "${rootDir}/generated/openapi/src/main/java"
        }
    }
}

tasks.register('cleanGenerated', Delete) {
    delete "${rootDir}/generated/openapi"
}

clean.dependsOn(cleanGenerated)
compileJava.dependsOn tasks.openApiGenerate