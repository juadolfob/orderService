/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kit.clientService.api;

import com.kit.clientService.model.dto.ClientDTO;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-18T14:25:26.424090300-05:00[America/Ojinaga]", comments = "Generator version: 7.4.0")
@Tag(name = "Client", description = "the Client API")
public interface ClientApi {

    /**
     * POST /api/client : Create new client
     *
     * @param clientDTO  (required)
     * @return Successful Client Creation (status code 200)
     */
    @Operation(
        operationId = "create",
        summary = "Create new client",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Client Creation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/client",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ClientDTO> create(
        @Parameter(name = "ClientDTO", description = "", required = true) @RequestBody ClientDTO clientDTO
    ) throws Exception;


    /**
     * DELETE /api/client/{id} : Update Existing Client
     *
     * @param id  (required)
     * @return Successful Client Update (status code 200)
     */
    @Operation(
        operationId = "delete",
        summary = "Update Existing Client",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Client Update", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/client/{id}",
        produces = "application/json"
    )
    
    ResponseEntity<Object> delete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) throws Exception;


    /**
     * GET /api/client/{id} : Retrieve existing client
     *
     * @param id  (required)
     * @return Successful client retrieval (status code 200)
     */
    @Operation(
        operationId = "get",
        summary = "Retrieve existing client",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful client retrieval", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/client/{id}",
        produces = "application/json"
    )
    
    ResponseEntity<ClientDTO> get(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) throws Exception;


    /**
     * GET /api/client : Retrieve all clients
     *
     * @return Successful client retrieval (status code 200)
     */
    @Operation(
        operationId = "getAll",
        summary = "Retrieve all clients",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful client retrieval", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ClientDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/client",
        produces = "application/json"
    )
    
    ResponseEntity<List<ClientDTO>> getAll(
        
    ) throws Exception;


    /**
     * PUT /api/client/{id} : Update Existing Client
     *
     * @param id  (required)
     * @param clientDTO  (required)
     * @return Successful Client Update (status code 200)
     */
    @Operation(
        operationId = "update",
        summary = "Update Existing Client",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Client Update", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/client/{id}",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ClientDTO> update(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "ClientDTO", description = "", required = true) @RequestBody ClientDTO clientDTO
    ) throws Exception;

}
